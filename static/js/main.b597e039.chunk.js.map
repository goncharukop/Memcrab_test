{"version":3,"sources":["components/Table/Table.js","App.jsx","index.js"],"names":["M","matrixCreate","matrix","i","matrixRow","j","randomNum","Math","ceil","random","push","id","amount","className","console","log","Table","useState","newMatrix","setNewMatrix","rowSum","sum","reduce","acc","el","getRowSum","columnAverage","temp","average","round","getColumnAverage","map","row","type","onClick","addOne","onMouseOver","counter","x","forEach","cell","getNeighborValue","onFocus","mat","newRow","filter","rowM","deleteRow","number","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAMIA,G,MAAI,GAIFC,EAAe,WAGnB,IAFA,IAAMC,EAAS,GAENC,EAAI,EAAGA,GAAKH,EAAGG,GAAK,EAAG,CAG9B,IAFA,IAAMC,EAAY,GAETC,EAAI,EAAGA,GATV,EASkBA,GAAK,EAAG,CAC9B,IAAMC,EAAYC,KAAKC,KAAqB,IAAhBD,KAAKE,UAEjCL,EAAUM,KAAK,CACbC,GAAI,CAACR,EAAGE,GACRO,OAAQN,EAAY,IAAMA,EAAYA,EAAY,IAClDO,UAAW,0BAIfX,EAAOQ,KAAKN,GAMd,OAFAU,QAAQC,IAAIb,GAELA,GAsCLA,EAASD,IAEAe,EAAQ,WAAO,IAAD,EACSC,mBAASf,GADlB,mBAClBgB,EADkB,KACPC,EADO,KAGnBC,EAnBU,SAACF,GAGjB,IAFA,IAAME,EAAS,GAENjB,EAAI,EAAGA,EAAIH,EAAGG,GAAK,EAC1BiB,EACGV,KAAK,CACJW,IAAKH,EAAUf,GAAGmB,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,EAAGZ,SAAQ,GACvDD,GAAIR,EAAI,IAId,OAAOiB,EAQQK,CAAUP,GACnBQ,EAzCiB,SAACR,GAGxB,IAFA,IAAMQ,EAAgB,GAEbrB,EAAI,EAAGA,EA/BR,EA+BeA,GAAK,EAAG,CAG7B,IAFA,IAAIsB,EAAO,EAEFxB,EAAI,EAAGA,EAAIH,EAAGG,GAAK,EACtBe,EAAUf,GAAGE,GAAGM,GAAG,KAAON,EAAI,IAChCsB,GAAQzB,EAAOC,GAAGE,GAAGO,QAIzBc,EAAchB,KAAK,CACjBkB,QAASrB,KAAKsB,MAAMF,EAAO3B,GAC3BW,GAAIN,EAAI,IAIZ,OAAOqB,EAuBeI,CAAiBZ,GA+DvC,OACE,qCACE,sBAAKL,UAAU,cAAf,UACE,uBAAOA,UAAU,QAAjB,SACE,gCACE,0DAEIX,EAAO6B,KAAI,SAAAC,GAAG,OACd,6BACGA,EAAID,KAAI,SAAAP,GAAE,OACT,6BACE,wBACES,KAAK,SACLpB,UAAWW,EAAGX,UACdqB,QAAS,kBA3EhB,SAAC,GAAY,IAAVV,EAAS,EAATA,GAChBA,EAAGZ,QAAU,EAEbO,EAAa,GAAD,mBAAKjB,GAAL,CAAasB,EAAGZ,OAAS,KAwEFuB,CAAO,CAAEX,QACxBY,YAAa,kBAlDV,SAAC,GAIxB,IAJoC,IAAVZ,EAAS,EAATA,GACtBa,EAAU,EACVC,EAAI,EAEDD,EApGD,GAqGJnC,EAAOqC,SAAQ,SAACP,GAqBd,OApBAA,EAAIO,SAAQ,SAACC,GAiBX,OAhBIhB,EAAGZ,OAAS0B,GAAKE,EAAK5B,QACvBY,EAAGZ,OAAS0B,GAAKE,EAAK5B,QACtBY,EAAGb,KAAO6B,EAAK7B,GACO,+BAAnB6B,EAAK3B,WACJwB,EA3GP,IA4GIG,EAAK3B,UAAY,6BACjBwB,GAAW,GAGbG,EAAK3B,UAAY,wBAGfwB,EAnHJ,IAoHEC,GAAK,GAGAE,KAGFR,KAIXb,EAAa,YAAIjB,IAoBsBuC,CAAiB,CAAEjB,QACtCkB,SAAO,EALT,SAOGlB,EAAGZ,UARCY,EAAGb,QAFPqB,EAAI,GAAGrB,cAoBxB,uBAAOE,UAAU,QAAjB,SACE,kCACE,qCACEO,EAAOW,KAAI,SAAAC,GAAG,OACd,+BACE,6BACE,wBACEC,KAAK,SACLpB,UAAU,+BAFZ,SAIGmB,EAAIX,QAGT,wBACEY,KAAK,SACLpB,UAAU,gBACVqB,QAAS,kBA7FP,SAAC,GAAa,IAAD,EAAVF,EAAU,EAAVA,IACfW,EAAM,GADmB,cAIRzC,GAJQ,yBAIlB0C,EAJkB,QAKvBA,EAAO,GAAGjC,GAAG,KAAOqB,EAAIrB,KAC1BgC,EAAMzC,EAAO2C,QAAO,SAAAC,GAAI,OAAIA,IAASF,OAFzC,2BAA8B,IAJD,8BAU7B5C,GAAK,EACLmB,EAAawB,GAkFgBI,CAAU,CAAEf,SAH7B,0BATOA,EAAIrB,eAsBrB,uBAAOE,UAAU,QAAjB,SACE,gCACE,yDAEE,6BACIa,EAAcK,KAAI,SAAAiB,GAAM,OACxB,6BACE,wBACEf,KAAK,SACLpB,UAAU,8BAFZ,SAIGN,KAAKsB,MAAMmB,EAAOpB,YALdoB,EAAOrC,gBAc1B,wBACEsB,KAAK,SACLpB,UAAU,8BACVqB,QAAS,kBAnIblC,GAAK,EACLE,EAASD,SACTkB,EAAajB,IA8HX,yBC9MO+C,EAAM,kBACjB,8BACE,cAAC,EAAD,OCHJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.b597e039.chunk.js","sourcesContent":["/* eslint-disable no-loop-func */\n/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport './Table.scss';\n// import PropTypes from 'prop-types';\n\nlet M = 5;\nconst N = 6;\nconst X = 3;\n\nconst matrixCreate = () => {\n  const matrix = [];\n\n  for (let i = 1; i <= M; i += 1) {\n    const matrixRow = [];\n\n    for (let j = 1; j <= N; j += 1) {\n      const randomNum = Math.ceil(Math.random() * 1000);\n\n      matrixRow.push({\n        id: [i, j],\n        amount: randomNum > 100 ? randomNum : randomNum + 100,\n        className: 'table__cell ui button',\n      });\n    }\n\n    matrix.push(matrixRow);\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(matrix);\n\n  return matrix;\n};\n\nconst getColumnAverage = (newMatrix) => {\n  const columnAverage = [];\n\n  for (let j = 0; j < N; j += 1) {\n    let temp = 0;\n\n    for (let i = 0; i < M; i += 1) {\n      if (newMatrix[i][j].id[1] === j + 1) {\n        temp += matrix[i][j].amount;\n      }\n    }\n\n    columnAverage.push({\n      average: Math.round(temp / M),\n      id: j + 1,\n    });\n  }\n\n  return columnAverage;\n};\n\nconst getRowSum = (newMatrix) => {\n  const rowSum = [];\n\n  for (let i = 0; i < M; i += 1) {\n    rowSum\n      .push({\n        sum: newMatrix[i].reduce((acc, el) => acc + el.amount, 0),\n        id: i + 1,\n      });\n  }\n\n  return rowSum;\n};\n\nlet matrix = matrixCreate();\n\nexport const Table = () => {\n  const [newMatrix, setNewMatrix] = useState(matrix);\n\n  const rowSum = getRowSum(newMatrix);\n  const columnAverage = getColumnAverage(newMatrix);\n\n  const addOne = ({ el }) => {\n    el.amount += 1;\n\n    setNewMatrix([...matrix, el.amount + 1]);\n  };\n\n  const addRow = () => {\n    M += 1;\n    matrix = matrixCreate();\n    setNewMatrix(matrix);\n  };\n\n  const deleteRow = ({ row }) => {\n    let mat = [];\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const newRow of matrix) {\n      if (newRow[0].id[0] === row.id) {\n        mat = matrix.filter(rowM => rowM !== newRow);\n      }\n    }\n\n    M -= 1;\n    setNewMatrix(mat);\n  };\n\n  const getNeighborValue = ({ el }) => {\n    let counter = 0;\n    let x = 0;\n\n    while (counter < X) {\n      matrix.forEach((row) => {\n        row.forEach((cell) => {\n          if (el.amount + x >= cell.amount\n          && el.amount - x <= cell.amount\n          && el.id !== cell.id) {\n            if (cell.className !== 'table__cell ui button blue'\n              && counter < X) {\n              cell.className = 'table__cell ui button blue';\n              counter += 1;\n            }\n          } else {\n            cell.className = 'table__cell ui button';\n          }\n\n          if (counter < X) {\n            x += 1;\n          }\n\n          return cell;\n        });\n\n        return row;\n      });\n    }\n\n    setNewMatrix([...matrix]);\n\n    // return matrix;\n  };\n\n  return (\n    <>\n      <div className=\"table-major\">\n        <table className=\"table\">\n          <tbody>\n            <th>\n              Table with random values\n              { matrix.map(row => (\n                <tr key={row[0].id}>\n                  {row.map(el => (\n                    <td key={el.id}>\n                      <button\n                        type=\"button\"\n                        className={el.className}\n                        onClick={() => addOne({ el })}\n                        onMouseOver={() => getNeighborValue({ el })}\n                        onFocus\n                      >\n                        {el.amount}\n                      </button>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </th>\n          </tbody>\n        </table>\n\n        <table className=\"table\">\n          <tbody>\n            <th>Sum</th>\n            { rowSum.map(row => (\n              <tr key={row.id}>\n                <td>\n                  <button\n                    type=\"button\"\n                    className=\"table__cell ui button yellow\"\n                  >\n                    {row.sum}\n                  </button>\n                </td>\n                <button\n                  type=\"button\"\n                  className=\"ui button red\"\n                  onClick={() => deleteRow({ row })}\n                >\n                  Delete row\n                </button>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <table className=\"table\">\n        <tbody>\n          <th>\n            Average value in column\n            <tr>\n              { columnAverage.map(number => (\n                <td key={number.id}>\n                  <button\n                    type=\"button\"\n                    className=\"table__cell ui button green\"\n                  >\n                    {Math.round(number.average)}\n                  </button>\n                </td>\n              ))}\n            </tr>\n          </th>\n        </tbody>\n      </table>\n\n      <button\n        type=\"button\"\n        className=\"table__cell ui button black\"\n        onClick={() => addRow()}\n      >\n        Add row\n      </button>\n    </>\n  );\n};\n\n// Table.propTypes = {};\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\nimport { Table } from './components/Table/Table';\n// import { Switch, Link, Route } from 'react-router-dom';\n\nexport const App = () => (\n  <div>\n    <Table />\n\n    {/* <nav className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/users\">Users</Link>\n    </nav>\n\n    <Switch>\n      <Route path=\"/users\">\n        <div>Users page</div>\n      </Route>\n      <Route path=\"/\">\n        <div>Home page</div>\n      </Route>\n    </Switch>\n  </div> */}\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}