{"version":3,"sources":["components/Table/Table.js","App.jsx","index.js"],"names":["showPercent","showTable","Table","useState","M","setM","N","setN","X","setX","error","setError","matrixCreate","matrix","i","matrixRow","j","randomNum","Math","floor","random","push","id","amount","className","newMatrix","setNewMatrix","handleChange","event","target","name","value","columnAverage","temp","average","round","getColumnAverage","rowSum","sum","reduce","acc","el","getRowSum","getInitialColor","forEach","row","cell","getAmount","onSubmit","preventDefault","type","placeholder","onChange","map","onClick","addOne","onMouseOver","counter","getNeighborValue","onFocus","percent","style","height","newRow","toFixed","getPercent","onMouseOut","onBlur","filter","deleteRow","number","newMatrixRow","addRow","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1176d64f.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-loop-func */\nimport React, { useState } from 'react';\nimport './Table.scss';\n\nlet showPercent = false;\nlet showTable = false;\n\nexport const Table = () => {\n  const [M, setM] = useState(15);\n  const [N, setN] = useState(15);\n  const [X, setX] = useState(5);\n  const [error, setError] = useState('');\n\n  const matrixCreate = () => {\n    const matrix = [];\n\n    for (let i = 0; i < M; i += 1) {\n      const matrixRow = [];\n\n      for (let j = 0; j < N; j += 1) {\n        const randomNum = Math.floor(Math.random() * 1000);\n\n        matrixRow.push({\n          id: [i, j],\n          amount: randomNum > 100 ? randomNum : randomNum + 100,\n          className: 'table__cell ui button',\n        });\n      }\n\n      matrix.push(matrixRow);\n    }\n\n    return matrix;\n  };\n\n  const [newMatrix, setNewMatrix] = useState(matrixCreate());\n\n  const addOne = ({ el }) => {\n    newMatrix\n      .forEach(row => row\n        .forEach((cell) => {\n          if (cell.id === el.id) {\n            el.amount += 1;\n          }\n        }));\n\n    setNewMatrix([...newMatrix]);\n  };\n\n  const handleCreate = (event) => {\n    event.preventDefault();\n\n    if (!M || !N || !X) {\n      setError('Fill all fields, please');\n\n      return;\n    }\n\n    setNewMatrix(matrixCreate);\n    showTable = true;\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'X':\n        setX(value);\n        break;\n      case 'N':\n        setN(value);\n        break;\n      case 'M':\n        setM(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getColumnAverage = () => {\n    const columnAverage = [];\n\n    for (let j = 0; j < N; j += 1) {\n      let temp = 0;\n\n      for (let i = 0; i < M; i += 1) {\n        if (newMatrix[i][j].id[1] === j) {\n          temp += newMatrix[i][j].amount;\n        }\n      }\n\n      columnAverage.push({\n        average: M ? Math.round(temp / M) : 0,\n        id: j,\n      });\n    }\n\n    return columnAverage;\n  };\n\n  const columnAverage = getColumnAverage();\n\n  const getRowSum = () => {\n    const rowSum = [];\n\n    for (let i = 0; i < M; i += 1) {\n      rowSum\n        .push({\n          sum: newMatrix[i].reduce((acc, el) => acc + el.amount, 0),\n          id: i,\n        });\n    }\n\n    return rowSum;\n  };\n\n  const rowSum = getRowSum(newMatrix);\n\n  const addRow = () => {\n    for (let i = M; i <= M; i += 1) {\n      const newMatrixRow = [];\n\n      for (let j = 0; j < N; j += 1) {\n        const randomNum = Math.floor(Math.random() * 1000);\n\n        newMatrixRow.push({\n          id: [i, j],\n          amount: randomNum > 100 ? randomNum : randomNum + 100,\n          className: 'table__cell ui button',\n        });\n      }\n\n      newMatrix.push(newMatrixRow);\n    }\n\n    setM(M + 1);\n    setNewMatrix([...newMatrix]);\n\n    return M;\n  };\n\n  const deleteRow = ({ row }) => {\n    for (const newRow of newMatrix) {\n      if (newRow[0].id[0] === row.id) {\n        setNewMatrix(newMatrix.filter(el => el !== newRow));\n        setM(M - 1);\n      }\n    }\n  };\n\n  const getNeighborValue = ({ el }) => {\n    let counter = 0;\n    let temp = 0;\n\n    while (counter < X) {\n      newMatrix.forEach((row) => {\n        row.forEach((cell) => {\n          if (el.amount + temp >= cell.amount\n          && el.amount - temp <= cell.amount\n          && el.id !== cell.id) {\n            if (cell.className !== 'table__cell ui button blue'\n              && counter < X) {\n              cell.className = 'table__cell ui button blue';\n              counter += 1;\n            }\n          } else {\n            cell.className = 'table__cell ui button';\n          }\n\n          if (counter < X) {\n            temp += 1;\n          }\n        });\n      });\n    }\n\n    setNewMatrix([...newMatrix]);\n  };\n\n  const getInitialColor = () => {\n    newMatrix.forEach((row) => {\n      row.forEach((cell) => {\n        cell.className = 'table__cell ui button';\n      });\n    });\n\n    setNewMatrix([...newMatrix]);\n  };\n\n  const getPercent = ({ row }) => {\n    newMatrix.forEach((newRow) => {\n      newRow.forEach((cell) => {\n        if (row.id === cell.id[0]) {\n          cell.percent = `${(cell.amount / row.sum * 100).toFixed(2)}%`;\n        } else {\n          cell.percent = cell.amount;\n        }\n      });\n    });\n\n    showPercent = true;\n    setNewMatrix([...newMatrix]);\n  };\n\n  const getAmount = () => {\n    showPercent = false;\n\n    setNewMatrix([...newMatrix]);\n  };\n\n  return (\n    <>\n      <form\n        className=\"ui form initial-form\"\n        onSubmit={handleCreate}\n      >\n        <label>\n          {`M : `}\n          <input\n            type=\"number\"\n            value={M}\n            name=\"M\"\n            placeholder=\"Enter columns\"\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          {`N : `}\n          <input\n            type=\"number\"\n            value={N}\n            name=\"N\"\n            placeholder=\"Enter rows\"\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          {`X : `}\n          <input\n            type=\"number\"\n            value={X}\n            name=\"X\"\n            onChange={handleChange}\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          className=\"ui button green\"\n        >\n          Create table\n        </button>\n        <p>{error}</p>\n      </form>\n\n      {\n        !showTable\n          ? <h3 className=\"create-text\">Click create table, pease</h3>\n          : (\n            <>\n              <div className=\"table-major\">\n                <table className=\"table\">\n                  <tbody>\n                    <th>\n                      Table with random values\n                      { newMatrix.map(row => (\n                        <tr key={row[0].id[0]}>\n                          {row.map(el => (\n                            <td key={el.id}>\n                              <button\n                                type=\"button\"\n                                className={el.className}\n                                onClick={() => addOne({ el })}\n                                onMouseOver={() => {\n                                  getInitialColor();\n                                  getNeighborValue({ el });\n                                }}\n                                onFocus={() => getInitialColor()}\n                              >\n                                {\n                                  showPercent\n                                    ? `${el.percent}`\n                                    : `${el.amount}`\n                                }\n                                <span\n                                  className=\"table__cell-percent\"\n                                  style={{\n                                    height: showPercent\n                                      ? `${el.percent}`\n                                      : ``,\n                                  }}\n                                />\n                              </button>\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                    </th>\n                  </tbody>\n                </table>\n\n                <table className=\"table\">\n                  <tbody>\n                    <th>Sum</th>\n                    { rowSum.map(row => (\n                      <tr key={row.id}>\n                        <td>\n                          <button\n                            type=\"button\"\n                            className=\"table__cell ui button yellow\"\n                            onMouseOver={() => {\n                              getInitialColor();\n                              getPercent({ row });\n                            }}\n                            onMouseOut={() => getAmount()}\n                            onFocus={() => getInitialColor()}\n                            onBlur={() => getAmount()}\n                          >\n                            {row.sum}\n                          </button>\n                        </td>\n                        <button\n                          type=\"button\"\n                          className=\"ui button red\"\n                          onClick={() => deleteRow({ row })}\n                        >\n                          Delete row\n                        </button>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              <table className=\"table\">\n                <tbody>\n                  <th>\n                    Average value in column\n                    <tr>\n                      { columnAverage.map(number => (\n                        <td key={number.id}>\n                          <button\n                            type=\"button\"\n                            className=\"table__cell ui button orange\"\n                          >\n                            {Math.round(number.average)}\n                          </button>\n                        </td>\n                      ))}\n                    </tr>\n                  </th>\n                </tbody>\n              </table>\n\n              <button\n                type=\"button\"\n                className=\"table__cell ui button green add-btn\"\n                onClick={() => addRow()}\n              >\n                Add row\n              </button>\n            </>\n          )\n      }\n    </>\n  );\n};\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\nimport { Table } from './components/Table/Table';\n\nexport const App = () => (\n  <div>\n    <Table />\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}