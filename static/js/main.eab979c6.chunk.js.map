{"version":3,"sources":["components/Table/Table.js","App.jsx","index.js"],"names":["M","matrix","i","matrixRow","j","randomNum","Math","floor","random","push","id","amount","className","matrixCreate","Table","useState","newMatrix","setNewMatrix","rowSum","sum","reduce","acc","el","getRowSum","columnAverage","temp","average","round","getColumnAverage","getInitialColor","forEach","row","cell","map","type","onClick","addOne","onMouseOver","counter","getNeighborValue","onFocus","newRow","filter","rowM","deleteRow","number","newMatrixRow","addRow","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eab979c6.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-loop-func */\nimport React, { useState } from 'react';\nimport './Table.scss';\n\nlet M = 5;\nconst N = 6;\nconst X = 3;\n\nconst matrixCreate = () => {\n  const matrix = [];\n\n  for (let i = 0; i < M; i += 1) {\n    const matrixRow = [];\n\n    for (let j = 0; j < N; j += 1) {\n      const randomNum = Math.floor(Math.random() * 1000);\n\n      matrixRow.push({\n        id: [i, j],\n        amount: randomNum > 100 ? randomNum : randomNum + 100,\n        className: 'table__cell ui button',\n      });\n    }\n\n    matrix.push(matrixRow);\n  }\n\n  return matrix;\n};\n\nconst getColumnAverage = (newMatrix) => {\n  const columnAverage = [];\n\n  for (let j = 0; j < N; j += 1) {\n    let temp = 0;\n\n    for (let i = 0; i < M; i += 1) {\n      if (newMatrix[i][j].id[1] === j) {\n        temp += matrix[i][j].amount;\n      }\n    }\n\n    columnAverage.push({\n      average: M ? Math.round(temp / M) : 0,\n      id: j,\n    });\n  }\n\n  return columnAverage;\n};\n\nconst getRowSum = (newMatrix) => {\n  const rowSum = [];\n\n  for (let i = 0; i < M; i += 1) {\n    rowSum\n      .push({\n        sum: newMatrix[i].reduce((acc, el) => acc + el.amount, 0),\n        id: i,\n      });\n  }\n\n  return rowSum;\n};\n\nlet matrix = matrixCreate();\n\nexport const Table = () => {\n  const [newMatrix, setNewMatrix] = useState(matrix);\n\n  const rowSum = getRowSum(newMatrix);\n  const columnAverage = getColumnAverage(newMatrix);\n\n  const addOne = ({ el }) => {\n    el.amount += 1;\n\n    setNewMatrix([...matrix, el.amount + 1]);\n  };\n\n  const addRow = () => {\n    for (let i = M; i <= M; i += 1) {\n      const newMatrixRow = [];\n\n      for (let j = 0; j < N; j += 1) {\n        const randomNum = Math.floor(Math.random() * 1000);\n\n        newMatrixRow.push({\n          id: [i, j],\n          amount: randomNum > 100 ? randomNum : randomNum + 100,\n          className: 'table__cell ui button',\n        });\n      }\n\n      matrix.push(newMatrixRow);\n    }\n\n    M += 1;\n    setNewMatrix([...matrix]);\n\n    return M;\n  };\n\n  const deleteRow = ({ row }) => {\n    for (const newRow of matrix) {\n      if (newRow[0].id[0] === row.id) {\n        matrix = [...matrix].filter(rowM => rowM !== newRow);\n      }\n    }\n\n    M -= 1;\n    setNewMatrix(matrix);\n\n    return M;\n  };\n\n  const getNeighborValue = ({ el }) => {\n    let counter = 0;\n    let temp = 0;\n\n    while (counter < X) {\n      matrix.forEach((row) => {\n        row.forEach((cell) => {\n          if (el.amount + temp >= cell.amount\n          && el.amount - temp <= cell.amount\n          && el.id !== cell.id) {\n            if (cell.className !== 'table__cell ui button blue'\n              && counter < X) {\n              cell.className = 'table__cell ui button blue';\n              counter += 1;\n            }\n          } else {\n            cell.className = 'table__cell ui button';\n          }\n\n          if (counter < X) {\n            temp += 1;\n          }\n        });\n      });\n    }\n\n    setNewMatrix([...matrix]);\n\n    return matrix;\n  };\n\n  const getInitialColor = () => {\n    matrix.forEach((row) => {\n      row.forEach((cell) => {\n        cell.className = 'table__cell ui button';\n      });\n    });\n\n    setNewMatrix([...matrix]);\n\n    return matrix;\n  };\n\n  return (\n    <>\n      <div className=\"table-major\">\n        <table className=\"table\">\n          <tbody>\n            <th>\n              Table with random values\n              { matrix.map(row => (\n                <tr key={row[0].id}>\n                  {row.map(el => (\n                    <td key={el.id}>\n                      <button\n                        type=\"button\"\n                        className={el.className}\n                        onClick={() => addOne({ el })}\n                        onMouseOver={() => {\n                          getInitialColor();\n                          getNeighborValue({ el });\n                        }}\n                        onFocus={() => getInitialColor()}\n                      >\n                        {el.amount}\n                      </button>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </th>\n          </tbody>\n        </table>\n\n        <table className=\"table\">\n          <tbody>\n            <th>Sum</th>\n            { rowSum.map(row => (\n              <tr key={row.id}>\n                <td>\n                  <button\n                    type=\"button\"\n                    className=\"table__cell ui button yellow\"\n                  >\n                    {row.sum}\n                  </button>\n                </td>\n                <button\n                  type=\"button\"\n                  className=\"ui button red\"\n                  onClick={() => deleteRow({ row })}\n                >\n                  Delete row\n                </button>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <table className=\"table\">\n        <tbody>\n          <th>\n            Average value in column\n            <tr>\n              { columnAverage.map(number => (\n                <td key={number.id}>\n                  <button\n                    type=\"button\"\n                    className=\"table__cell ui button orange\"\n                  >\n                    {Math.round(number.average)}\n                  </button>\n                </td>\n              ))}\n            </tr>\n          </th>\n        </tbody>\n      </table>\n\n      <button\n        type=\"button\"\n        className=\"table__cell ui button green add-btn\"\n        onClick={() => addRow()}\n      >\n        Add row\n      </button>\n    </>\n  );\n};\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\nimport { Table } from './components/Table/Table';\n// import { Switch, Link, Route } from 'react-router-dom';\n\nexport const App = () => (\n  <div>\n    <Table />\n\n    {/* <nav className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/users\">Users</Link>\n    </nav>\n\n    <Switch>\n      <Route path=\"/users\">\n        <div>Users page</div>\n      </Route>\n      <Route path=\"/\">\n        <div>Home page</div>\n      </Route>\n    </Switch>\n  </div> */}\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}