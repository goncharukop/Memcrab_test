{"version":3,"sources":["components/Table/Table.js","App.jsx","index.js"],"names":["M","matrix","i","matrixRow","j","randomNum","Math","floor","random","push","id","amount","className","matrixCreate","showPercent","Table","useState","newMatrix","setNewMatrix","rowSum","sum","reduce","acc","el","getRowSum","columnAverage","temp","average","round","getColumnAverage","getInitialColor","forEach","row","cell","getAmount","map","type","onClick","addOne","onMouseOver","counter","getNeighborValue","onFocus","percent","style","height","newRow","toFixed","getPercent","onMouseOut","onBlur","filter","rowM","deleteRow","number","newMatrixRow","addRow","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.415b3d09.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-loop-func */\nimport React, { useState } from 'react';\nimport './Table.scss';\n\nlet M = 5;\nconst N = 6;\nconst X = 3;\n\nconst matrixCreate = () => {\n  const matrix = [];\n\n  for (let i = 0; i < M; i += 1) {\n    const matrixRow = [];\n\n    for (let j = 0; j < N; j += 1) {\n      const randomNum = Math.floor(Math.random() * 1000);\n\n      matrixRow.push({\n        id: [i, j],\n        amount: randomNum > 100 ? randomNum : randomNum + 100,\n        className: 'table__cell ui button',\n      });\n    }\n\n    matrix.push(matrixRow);\n  }\n\n  return matrix;\n};\n\nconst getColumnAverage = (newMatrix) => {\n  const columnAverage = [];\n\n  for (let j = 0; j < N; j += 1) {\n    let temp = 0;\n\n    for (let i = 0; i < M; i += 1) {\n      if (newMatrix[i][j].id[1] === j) {\n        temp += matrix[i][j].amount;\n      }\n    }\n\n    columnAverage.push({\n      average: M ? Math.round(temp / M) : 0,\n      id: j,\n    });\n  }\n\n  return columnAverage;\n};\n\nconst getRowSum = (newMatrix) => {\n  const rowSum = [];\n\n  for (let i = 0; i < M; i += 1) {\n    rowSum\n      .push({\n        sum: newMatrix[i].reduce((acc, el) => acc + el.amount, 0),\n        id: i,\n      });\n  }\n\n  return rowSum;\n};\n\nlet matrix = matrixCreate();\nlet showPercent = false;\n\nexport const Table = () => {\n  const [newMatrix, setNewMatrix] = useState(matrix);\n\n  const rowSum = getRowSum(newMatrix);\n  const columnAverage = getColumnAverage(newMatrix);\n\n  const addOne = ({ el }) => {\n    el.amount += 1;\n\n    setNewMatrix([...matrix, el.amount + 1]);\n  };\n\n  const addRow = () => {\n    for (let i = M; i <= M; i += 1) {\n      const newMatrixRow = [];\n\n      for (let j = 0; j < N; j += 1) {\n        const randomNum = Math.floor(Math.random() * 1000);\n\n        newMatrixRow.push({\n          id: [i, j],\n          amount: randomNum > 100 ? randomNum : randomNum + 100,\n          className: 'table__cell ui button',\n        });\n      }\n\n      matrix.push(newMatrixRow);\n    }\n\n    M += 1;\n    setNewMatrix([...matrix]);\n\n    return M;\n  };\n\n  const deleteRow = ({ row }) => {\n    for (const newRow of matrix) {\n      if (newRow[0].id[0] === row.id) {\n        matrix = [...matrix].filter(rowM => rowM !== newRow);\n      }\n    }\n\n    M -= 1;\n    setNewMatrix(matrix);\n\n    return M;\n  };\n\n  const getNeighborValue = ({ el }) => {\n    let counter = 0;\n    let temp = 0;\n\n    while (counter < X) {\n      matrix.forEach((row) => {\n        row.forEach((cell) => {\n          if (el.amount + temp >= cell.amount\n          && el.amount - temp <= cell.amount\n          && el.id !== cell.id) {\n            if (cell.className !== 'table__cell ui button blue'\n              && counter < X) {\n              cell.className = 'table__cell ui button blue';\n              counter += 1;\n            }\n          } else {\n            cell.className = 'table__cell ui button';\n          }\n\n          if (counter < X) {\n            temp += 1;\n          }\n        });\n      });\n    }\n\n    setNewMatrix([...matrix]);\n\n    return matrix;\n  };\n\n  const getInitialColor = () => {\n    matrix.forEach((row) => {\n      row.forEach((cell) => {\n        cell.className = 'table__cell ui button';\n      });\n    });\n\n    setNewMatrix([...matrix]);\n\n    return matrix;\n  };\n\n  const getPercent = ({ row }) => {\n    matrix.forEach((newRow) => {\n      newRow.forEach((cell) => {\n        if (row.id === cell.id[0]) {\n          // eslint-disable-next-line no-restricted-properties\n          cell.percent = `${(cell.amount / row.sum * 100).toFixed(2)}%`;\n        } else {\n          cell.percent = cell.amount;\n        }\n      });\n    });\n\n    showPercent = true;\n\n    setNewMatrix([...matrix]);\n\n    return matrix;\n  };\n\n  const getAmount = () => {\n    showPercent = false;\n\n    setNewMatrix([...matrix]);\n\n    return matrix;\n  };\n\n  return (\n    <>\n      <div className=\"table-major\">\n        <table className=\"table\">\n          <tbody>\n            <th>\n              Table with random values\n              { matrix.map(row => (\n                <tr key={row[0].id}>\n                  {row.map(el => (\n                    <td key={el.id}>\n                      <button\n                        type=\"button\"\n                        className={el.className}\n                        onClick={() => addOne({ el })}\n                        onMouseOver={() => {\n                          getInitialColor();\n                          getNeighborValue({ el });\n                        }}\n                        onFocus={() => getInitialColor()}\n                      >\n                        {\n                          showPercent\n                            ? `${el.percent}`\n                            : `${el.amount}`\n                        }\n                        <span\n                          className=\"table__cell-percent\"\n                          style={{ height: showPercent ? `${el.percent}` : `` }}\n                        />\n                      </button>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </th>\n          </tbody>\n        </table>\n\n        <table className=\"table\">\n          <tbody>\n            <th>Sum</th>\n            { rowSum.map(row => (\n              <tr key={row.id}>\n                <td>\n                  <button\n                    type=\"button\"\n                    className=\"table__cell ui button yellow\"\n                    onMouseOver={() => {\n                      getInitialColor();\n                      getPercent({ row });\n                    }}\n                    onMouseOut={() => getAmount()}\n                    onFocus={() => getInitialColor()}\n                    onBlur={() => getAmount()}\n                  >\n                    {row.sum}\n                  </button>\n                </td>\n                <button\n                  type=\"button\"\n                  className=\"ui button red\"\n                  onClick={() => deleteRow({ row })}\n                >\n                  Delete row\n                </button>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <table className=\"table\">\n        <tbody>\n          <th>\n            Average value in column\n            <tr>\n              { columnAverage.map(number => (\n                <td key={number.id}>\n                  <button\n                    type=\"button\"\n                    className=\"table__cell ui button orange\"\n                  >\n                    {Math.round(number.average)}\n                  </button>\n                </td>\n              ))}\n            </tr>\n          </th>\n        </tbody>\n      </table>\n\n      <button\n        type=\"button\"\n        className=\"table__cell ui button green add-btn\"\n        onClick={() => addRow()}\n      >\n        Add row\n      </button>\n    </>\n  );\n};\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\nimport { Table } from './components/Table/Table';\n\nexport const App = () => (\n  <div>\n    <Table />\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}