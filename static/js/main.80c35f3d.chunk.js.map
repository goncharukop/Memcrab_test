{"version":3,"sources":["components/Table/Table.js","App.jsx","index.js"],"names":["Table","matrix","i","matrixRow","j","randomNum","Math","ceil","random","push","id","amount","console","log","matrixCreate","rowSum","columnAverage","sum","reduce","acc","el","temp","average","round","className","map","row","number","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAqCaA,G,kBAAQ,WAKnB,IAJA,IAAMC,EA5BoB,WAG1B,IAFA,IAAMA,EAAS,GAENC,EAAI,EAAGA,GAND,EAMSA,GAAK,EAAG,CAG9B,IAFA,IAAMC,EAAY,GAETC,EAAI,EAAGA,GARH,EAQWA,GAAK,EAAG,CAC9B,IAAMC,EAAYC,KAAKC,KAAqB,IAAhBD,KAAKE,UAEjCL,EAAUM,KAAK,CACbC,GAAI,CAACR,EAAGE,GAERO,OAAQN,EAAY,IAAMA,EAAYA,EAAY,MAItDJ,EAAOQ,KAAKN,GAQd,OAFAS,QAAQC,IAAIZ,GAELA,EAIQa,GACTC,EAAS,GACTC,EAAgB,GAEbd,EAAI,EAAGA,EAnCD,EAmCQA,GAAK,EAC1Ba,EACGN,KAAK,CACJQ,IAAKhB,EAAOC,GAAGgB,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,EAAGT,SAAQ,GACpDD,GAAIR,EAAI,IAId,IAAK,IAAIE,EAAI,EAAGA,EA1CD,EA0CQA,GAAK,EAAG,CAG7B,IAFA,IAAIiB,EAAO,EAEFnB,EAAI,EAAGA,EA9CH,EA8CUA,GAAK,EACtBD,EAAOC,GAAGE,GAAGM,GAAG,KAAON,EAAI,IAC7BiB,GAAQpB,EAAOC,GAAGE,GAAGO,QAIzBK,EAAcP,KAAK,CACjBa,QAAShB,KAAKiB,MAAMF,EApDT,GAqDXX,GAAIN,EAAI,IAOZ,OAFAQ,QAAQC,IAAIG,GAGV,qCACE,sBAAKQ,UAAU,cAAf,UACE,uBAAOA,UAAU,QAAjB,SACE,gCACIvB,EAAOwB,KAAI,SAAAC,GAAG,OACd,6BACGA,EAAID,KAAI,SAAAL,GAAE,OACT,oBAAgBI,UAAU,cAA1B,SACGJ,EAAGT,QADGS,EAAGV,QAFPgB,EAAI,GAAGhB,WAWtB,uBAAOc,UAAU,QAAjB,SACE,gCACIT,EAAOU,KAAI,SAAAC,GAAG,OACd,6BACE,oBAAIF,UAAU,cAAd,SACGE,EAAIT,OAFAS,EAAIhB,cAUrB,uBAAOc,UAAU,QAAjB,SACE,gCACE,6BACIR,EAAcS,KAAI,SAAAE,GAAM,OACxB,oBAAoBH,UAAU,cAA9B,SACGG,EAAOL,SADDK,EAAOjB,kBC/FjBkB,EAAM,kBACjB,8BACE,cAAC,EAAD,OCHJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.80c35f3d.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-for */\nimport React from 'react';\nimport './Table.scss';\n// import PropTypes from 'prop-types';\n\n// const [state, setState] = useState([]);\n\nexport const M = 7;\nexport const N = 4;\n\nexport const matrixCreate = () => {\n  const matrix = [];\n\n  for (let i = 1; i <= M; i += 1) {\n    const matrixRow = [];\n\n    for (let j = 1; j <= N; j += 1) {\n      const randomNum = Math.ceil(Math.random() * 1000);\n\n      matrixRow.push({\n        id: [i, j],\n        // id: i * 10 + j,\n        amount: randomNum > 100 ? randomNum : randomNum + 100,\n      });\n    }\n\n    matrix.push(matrixRow);\n  }\n\n  // setState(matrix);\n\n  // eslint-disable-next-line no-console\n  console.log(matrix);\n\n  return matrix;\n};\n\nexport const Table = () => {\n  const matrix = matrixCreate();\n  const rowSum = [];\n  const columnAverage = [];\n\n  for (let i = 0; i < M; i += 1) {\n    rowSum\n      .push({\n        sum: matrix[i].reduce((acc, el) => acc + el.amount, 0),\n        id: i + 1,\n      });\n  }\n\n  for (let j = 0; j < N; j += 1) {\n    let temp = 0;\n\n    for (let i = 0; i < M; i += 1) {\n      if (matrix[i][j].id[1] === j + 1) {\n        temp += matrix[i][j].amount;\n      }\n    }\n\n    columnAverage.push({\n      average: Math.round(temp / N),\n      id: j + 1,\n    });\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(columnAverage);\n\n  return (\n    <>\n      <div className=\"table-major\">\n        <table className=\"table\">\n          <tbody>\n            { matrix.map(row => (\n              <tr key={row[0].id}>\n                {row.map(el => (\n                  <td key={el.id} className=\"table__cell\">\n                    {el.amount}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <table className=\"table\">\n          <tbody>\n            { rowSum.map(row => (\n              <tr key={row.id}>\n                <td className=\"table__cell\">\n                  {row.sum}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            { columnAverage.map(number => (\n              <td key={number.id} className=\"table__cell\">\n                {number.average}\n              </td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n};\n\n// Table.propTypes = {};\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\nimport { Table } from './components/Table/Table';\n// import { Switch, Link, Route } from 'react-router-dom';\n\nexport const App = () => (\n  <div>\n    <Table />\n\n    {/* <nav className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/users\">Users</Link>\n    </nav>\n\n    <Switch>\n      <Route path=\"/users\">\n        <div>Users page</div>\n      </Route>\n      <Route path=\"/\">\n        <div>Home page</div>\n      </Route>\n    </Switch>\n  </div> */}\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}